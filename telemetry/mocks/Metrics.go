// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Metrics) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: name, value, tags
func (_m *Metrics) Count(name string, value int64, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Decr provides a mock function with given fields: name, tags
func (_m *Metrics) Decr(name string, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: errName
func (_m *Metrics) Error(errName string) {
	_m.Called(errName)
}

// Gauge provides a mock function with given fields: name, value, rate, tags
func (_m *Metrics) Gauge(name string, value float64, rate float64, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value, rate)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Histogram provides a mock function with given fields: name, value, rate, tags
func (_m *Metrics) Histogram(name string, value float64, rate float64, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value, rate)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// IncMonotonic provides a mock function with given fields: name, tags
func (_m *Metrics) IncMonotonic(name string, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Incr provides a mock function with given fields: name, tags
func (_m *Metrics) Incr(name string, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Latency provides a mock function with given fields: jobName, start, tags
func (_m *Metrics) Latency(jobName string, start time.Time, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, jobName, start)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Time provides a mock function with given fields: name, value, tags
func (_m *Metrics) Time(name string, value time.Duration, tags ...string) {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
